name: Build MI-4 Padavan

on:
  workflow_dispatch:
    inputs:
      firmwarever:
        description: 'firmware''s version'
        required: true
        default: '20220512'
      
env:
  REPOSITORY_URL: https://github.com/hy5528/Padavan-KVR.git
  TOOLCHAIN_URL: https://github.com/hanwckf/padavan-toolchain/releases/download/v1.1/mipsel-linux-uclibc.tar.xz
  WORK_PATH: /opt/rt-n56u
  TARGET_NAME: MI-4
  FIRMWARE_DATEPREFIX: $(date +"%Y%m%d")
  FIRMWARE_PATH: /opt/firmwares
  APPLY_RAINBOWTHEME: false
  RECOVERY_SSPBINREMOTEDOWNLOAD: true
  BUILD_OWNER: hy5528
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: false
jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot kmod \
        cpio git python-docutils gettext automake autopoint texinfo build-essential help2man \
        pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget libc-dev-bin
        sudo timedatectl set-timezone "$TIME_ZONE"
      - name: Clone source
        run: |
          git clone --depth=1 $src_git $build_dir
          cd $build_dir
          GIT_VERSION="$(git rev-parse --short=7 HEAD 2>/dev/null)"
          build_date="$(date +%Y%m%d)"
          echo "build_date=${build_date}" >> $GITHUB_ENV
          echo "build_version=${GIT_VERSION}" >> $GITHUB_ENV
          echo "image_suffix=${GIT_VERSION}_${build_date}" >> $GITHUB_ENV
          echo "image_name=images_${build_variant}_${GIT_VERSION}" >> $GITHUB_ENV
      - name: Run shellcheck
        run: |
          cd $build_dir
          if [ -f ./trunk/tools/shellcheck.sh ]; then sh ./trunk/tools/shellcheck.sh; fi
      - name: Prepare toolchain
        run: |
          cd $build_dir/toolchain-mipsel
          sh dl_toolchain.sh
      - name: Copy build_firmware_modify to build directory for making the build as lean as possible
        run: |
          if [ -d meIsreallyba/modify ]; then cp -rf meIsreallyba/modify/* $build_dir/trunk/; fi

      - name: Custom config
        run: |
          cd $WORK_PATH/trunk
          if [ ! -f configs/templates/$TARGET_NAME.config ] ; then
          echo "configs/templates/${TARGET_NAME}.config not found"
          exit 1
          fi
          cp -f configs/templates/$TARGET_NAME.config .config
          sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
          ################################################################################################
          #因不同型号配置功能不一样，所以先把配置项删除，如果你自己要添加其他的，也要写上删除这一条，切记！！！
          ################################################################################################
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER/d' .config #删除配置项SOFTETHERVPN
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT/d' .config #删除配置项SOFTETHERVPN
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD/d' .config #删除配置项SOFTETHERVPN   
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config #删除配置项SS plus+
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config #删除配置项SS server
          sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config #删除配置项DNSFORWARDER
          sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config #删除配置项adbyby plus+
          sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config #删除配置项FRP Client
          sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config #删除配置项FRPS Server
          sed -i '/CONFIG_FIRMWARE_INCLUDE_NPC/d' .config #删除配置项NPC
          sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config #删除配置项TUNSAFE
          sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config #删除配置项阿里DDNS
          sed -i '/CONFIG_FIRMWARE_INCLUDE_ZEROTIER/d' .config #删除配置项ZEROTIER
          sed -i '/CONFIG_FIRMWARE_INCLUDE_CLOUDFLAREDDNS/d' .config #删除配置项CLOUDFLAREDDNS
          sed -i '/CONFIG_FIRMWARE_INCLUDE_NVPPROXY/d' .config #删除配置项NVPPROXY
          sed -i '/CONFIG_FIRMWARE_INCLUDE_DDNSTO/d' .config #删除配置项DDNSTO
          sed -i '/CONFIG_FIRMWARE_INCLUDE_WIREGUARD/d' .config #删除配置项WIREGUARD
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config
          sed -i '/CONFIG_FIRMWARE_INCLUDE_KUMASOCKS/d' .config
          sed -i '/CONFIG_FIRMWARE_INCLUDE_IPT2SOCKS/d' .config
          sed -i '/CONFIG_FIRMWARE_INCLUDE_MICROSOCKS/d' .config
          #校园网相关开始
          sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config #删除配置项MENTOHUST
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config #删除配置项SCUTCLIENT
          sed -i '/CONFIG_FIRMWARE_INCLUDE_NAPT66/d' .config
          sed -i '/CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT/d' .config
          sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIEAP/d' .config
          sed -i '/CONFIG_FIRMWARE_INCLUDE_DOGCOM/d' .config
          #校园网相关结束
          sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
          ######################################################################
          #以下选项是定义你需要的功能（y=集成,n=忽略），重新写入到.config文件
          ######################################################################
          echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER=n" >> .config #SOFTETHERVPN
          echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT=n" >> .config #SOFTETHERVPN
          echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD=n" >> .config #SOFTETHERVPN
          #科学相关
          echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y" >> .config #SS plus+
          echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=n" >> .config #集成v2ray执行文件（3.8M左右)
          echo "CONFIG_FIRMWARE_INCLUDE_XRAY=y" >> .config #集成xray执行文件(5.6M左右)，可以代替v2ray，注：如果闪存太小不够还是建议使用v2ray
          echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=y" >> .config #集成trojan执行文件(1.1M左右)
          echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=n" >> .config # simple-obfs混淆插件
          echo "CONFIG_FIRMWARE_INCLUDE_SSSERVER=n" >> .config #SS server
          echo "CONFIG_FIRMWARE_INCLUDE_KUMASOCKS=y" >> .config #socks5
          #
          echo "CONFIG_FIRMWARE_INCLUDE_IPT2SOCKS=n" >> .config
          echo "CONFIG_FIRMWARE_INCLUDE_MICROSOCKS=n" >> .config
          echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config #可以不集成
          echo "CONFIG_FIRMWARE_INCLUDE_TUNSAFE=n" >> .config #TUNSAFE
          echo "CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=n" >> .config #DNSFORWARDER
          #
          echo "CONFIG_FIRMWARE_INCLUDE_FRPC=n" >> .config #内网穿透FRPC
          echo "CONFIG_FIRMWARE_INCLUDE_FRPS=n" >> .config #内网穿透FRPS
          echo "CONFIG_FIRMWARE_INCLUDE_NPC=n" >> .config #删除配置项NPC
          #
          echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=y" >> .config #adbyby plus+
          echo "CONFIG_FIRMWARE_INCLUDE_KOOLPROXY=y" >> .config #KP广告过滤
          #
          echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=n" >> .config #smartdns
          echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNSBIN=n" >> .config #smartdns二进制文件
          echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=n" >> .config
          #
          echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=n" >> .config #阿里DDNS
          echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=n" >> .config #zerotier ~1.3M
          echo "CONFIG_FIRMWARE_INCLUDE_CLOUDFLAREDDNS=n" >> .config #CLOUDFLAREDDNS
          echo "CONFIG_FIRMWARE_INCLUDE_NVPPROXY=n" >> .config #NVPPROXY
          echo "CONFIG_FIRMWARE_INCLUDE_DDNSTO=n" >> .config #DDNSTO
          echo "CONFIG_FIRMWARE_INCLUDE_WIREGUARD=n" >> .config #WIREGUARD
          #
          echo "CONFIG_FIRMWARE_INCLUDE_ALDRIVER=n" >> .config #阿里云盘
          #
          echo "CONFIG_FIRMWARE_INCLUDE_CADDY=n" >> .config #在线文件管理服务
          echo "CONFIG_FIRMWARE_INCLUDE_CADDYBIN=n" >> .config #集成caddu执行文件，此文件有13M,请注意固件大小。如果不集成，会从网上下载下来执行，不影响正常使用
          #
          echo "CONFIG_FIRMWARE_INCLUDE_WYY=y" >> .config #网易云解锁
          echo "CONFIG_FIRMWARE_INCLUDE_WYYBIN=y" >> .config #网易云解锁GO版本执行文件（4M多）注意固件超大小,不集成会自动下载
          #校园网相关开始
          echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n" >> .config #MENTOHUST
          echo "CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=n" >> .config #SCUTCLIENT
          echo "CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT=n" >> .config
          echo "CONFIG_FIRMWARE_INCLUDE_MINIEAP=n" >> .config
          echo "CONFIG_FIRMWARE_INCLUDE_DOGCOM=n" >> .config
          echo "CONFIG_FIRMWARE_INCLUDE_NAPT66=n" >> .config
          #校园网相关结束
          #########################################################################################
          #自定义添加其它功能请参考源码configs/templates/目录下的config文件。按照上面的格式添加即可
          #格式如下：
          #sed -i '/自定义项/d' .config
          #echo "自定义项=y" >> .config
          sed -i "s/FIRMWARE_BUILDS_REV=.*/FIRMWARE_BUILDS_REV=${{ github.event.inputs.firmwarever }}/g" ./versions.inc
          echo '更新版本号时间'
          #########################################################################################
      # Create Release was put before "Start Build" to avoid building already existing build      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.build_version }}
          release_name: Padavan (${{ env.build_version }})
          body: |
            Build Date: ${{ env.build_date }} 
            Build Version: ${{ env.build_version }} 
          draft: false
          prerelease: false
          
      - name: Start build
        run: |
          cd $build_dir/trunk
          for m in $targets; do fakeroot ./build_firmware_ci $m; \
          if [ $? = 0 ]; then cp -f images/*.trx $images_dir/$m.trx; else exit 1; fi; \
          ./clear_tree_simple >/dev/null 2>&1; done
      - name: Upload MI-4
        id: upload-release-asset-MI-4
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /opt/images/MI-4.trx
          asset_name: MI-4_${{ env.build_date }}_${{ env.build_version }}.trx
          asset_content_type: application/bin
